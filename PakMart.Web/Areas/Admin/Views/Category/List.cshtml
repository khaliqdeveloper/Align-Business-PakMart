@{

    ViewData["Title"] = "Category";
}



<style>
    .toggle-btn {
        border: none; /* Removes the border */
        background: none; /* Removes background color */
        outline: none; /* Removes the focus outline */
        padding: 0; /* Removes extra padding */
        color: inherit; /* Inherits text color for a cleaner look */
    }

        .toggle-btn:focus,
        .toggle-btn:active {
            outline: none;
            box-shadow: none; /* Removes any focus or active shadow */
            border: none; /* Ensures no border on focus */
        }

    .pagination {
        margin: 0;
    }

    ul.pagination {
        margin: 0px !important;
    }



    .page-item .page-link {
        color: #555; /* Default text color */
        border: 1px solid #ddd;
        padding: 8px 12px;
        margin: 0 0px;
        text-decoration: none;
    }

    .page-item.active .page-link {
        background-color: #3C8DBC; /* Active background color */
        color: #fff; /* Active text color */
        border-color: #3C8DBC;
    }

    .page-link:hover {
        background-color: #3C8DBC;
        color: #fff;
        text-decoration: none;
    }

    nav {
        margin-top: 5px;
    }
</style>


<div>
    <!-- Header and Info Text -->
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3>Categories</h3>
        <div class="deletebtns">
            <a asp-action="Create" asp-controller="Category" class="btn btn-sm" style="background-color: #3C8DBC; color: white;" id="addnew">
                <i class="fa fa-plus"></i> Add New
            </a>
            <button class="btn btn-sm btn-danger" id="delete-selected" onclick="deleteSelected()">
                <i class="fa fa-trash"></i> Delete (selected)
            </button>

        </div>
    </div>

    <!-- Search Form -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center py-2 px-3">
            <div class="d-flex align-items-center gap-2">
                <i class="fas fa-search text-dark"></i>
                <span>Search</span>
            </div>
            <button class="btn btn-link text-decoration-none toggle-btn p-0" type="button" data-bs-toggle="collapse" data-bs-target="#searchFormCollapse" aria-expanded="false" id="toggleButton">
                <i class="fa fa-caret-down text-dark"></i>
            </button>
        </div>

        <div id="searchFormCollapse" class="collapse">
            <div class="card-body">
                <form id="searchForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="categoryName" class="col-form-label">Category Name</label>
                            <input type="text" class="form-control" id="categoryName" name="CategoryName">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="published" class="col-form-label">Published</label>
                            <select class="form-select" id="published" name="Published">
                                <option value="all">All</option>
                                <option value="published">Published</option>
                                <option value="unpublished">Unpublished</option>
                            </select>
                        </div>
                    </div>


                    <!-- Search Button -->
                    <div class="text-center">
                        <button type="button" class="btn btn-primary mt-2">
                            <i class="fa fa-search me-1"></i> Search
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <div id="logTableContainer">
        <!-- Logs Table -->
        <div style="overflow-x: auto; width: 100%;">
            <table class=" table table-bordered table-striped mt-2" style="width: auto; min-width: 100%; border-collapse: collapse; white-space: nowrap; font-size: 13px;">
                <thead>
                    <tr style="color: black;">
                        <td style="text-align: center; padding: 3px;">
                            <input type="checkbox" class="select-all select-item" onclick="selectAllLogs(this)">
                        </td>
                        <th>Name</th>
                        <th>Published</th>
                        <th>Display Order</th>
                        <th>Edit</th>
                    </tr>
                </thead>
                <tbody id="logTableBody">
                    <tr>
                        <td style="text-align: center; padding: 3px;"><input type="checkbox" class="select-item"></td>
                        <td>Computers</td>
                        <td>Yes</td>
                        <td>1</td>
                        <td class="text-center p-1 pt-2">
                            <a asp-action="Edit" asp-controller="Category" class="btn btn-sm btn-light shadow-sm d-inline-flex align-items-center justify-content-center px-3 py-1 rounded" style="font-size: 12px;">
                                <i class="fas fa-edit me-1"></i> Edit
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <td style="text-align: center; padding: 3px;"><input type="checkbox" class="select-item"></td>
                        <td>Electronics</td>
                        <td>No</td>
                        <td>2</td>
                        <td class="text-center p-1 pt-2">
                            <button class="btn btn-sm btn-light shadow-sm d-inline-flex align-items-center justify-content-center px-3 py-1 rounded" style="font-size: 12px;">
                                <i class="fas fa-edit me-1"></i> Edit
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td style="text-align: center; padding: 3px;"><input type="checkbox" class="select-item"></td>
                        <td>Apparel</td>
                        <td>Yes</td>
                        <td>3</td>
                        <td class="text-center p-1 pt-2">
                            <button class="btn btn-sm btn-light shadow-sm d-inline-flex align-items-center justify-content-center px-3 py-1 rounded" style="font-size: 12px;">
                                <i class="fas fa-edit me-1"></i> Edit
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>


        @* Pagination *@
        <div class="card mb-1">
            <div class="card-header d-flex justify-content-between align-items-center flex-wrap" style="padding: 1px !important;">

                <!-- Pagination Info -->
                <div>
                    <p class="mb-0">
                        Showing 1 - 10 of 50 items
                    </p>
                </div>

                <!-- Centered Dropdown -->
                <div style="display: flex; align-items: center; border: 1px solid #F4F4F4; padding: 4px 8px; border-radius: 2px;">
                    <label for="itemsPerPage" class="mb-0 me-2 mr-2">Show</label>
                    <select id="itemsPerPage" class="form-select form-select-sm" style="width: auto; min-width: 70px;">
                        <option value="7">7</option>
                        <option value="15" selected>15</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                    <label class="mb-0 ms-2 ml-2">items</label>
                </div>


                <!-- Pagination Arrows -->
                <nav>
                    <ul class="pagination mb-1">
                        <li class="page-item disabled">
                            <span class="page-link" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </span>
                        </li>
                        <li class="page-item">
                            <span class="page-link" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </span>
                        </li>
                    </ul>
                </nav>

            </div>
        </div>





        @* <div class="card mb-1 mt-3">
            <div class="card-header d-flex justify-content-between align-items-center" style="padding: 1px 8px !important;">
                <p class="mb-0">
                    Showing @((Model.CurrentPage - 1) * Model.ItemsPerPage + 1) - @Math.Min(Model.CurrentPage * Model.ItemsPerPage, Model.TotalItems) of @Model.TotalItems items
                </p>
                <nav>
                    <ul class="pagination mb-0">
                        <li class="page-item @(Model.CurrentPage == 1 ? " disabled" : "")">
                            <a class="page-link" href="@Url.Action(" List", new { page = Model.CurrentPage - 1 })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item @(Model.CurrentPage == Math.Ceiling((double)Model.TotalItems / Model.ItemsPerPage) ? " disabled" : "")">
                            <a class="page-link" href="@Url.Action(" List", new { page = Model.CurrentPage + 1 })" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div> *@

    </div>

</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>

    document.getElementById('toggleButton').addEventListener('click', function () {
        const toggleIcon = this.querySelector('.fa');
        const isExpanded = this.getAttribute('aria-expanded') === 'true';

        // Toggle icon based on collapse state
        if (isExpanded) {
            toggleIcon.classList.remove('fa-caret-up');
            toggleIcon.classList.add('fa-caret-down');
        } else {
            toggleIcon.classList.remove('fa-caret-down');
            toggleIcon.classList.add('fa-caret-up');
        }
    });


    // Placeholder for search function
    function searchLogs() {
        const createdFrom = document.getElementById("createdFrom").value;
        const createdTo = document.getElementById("createdTo").value;
        const message = document.getElementById("message").value;
        const logLevel = document.getElementById("logLevel").value;
        const userName = document.getElementById("byuser").value;

        $.ajax({
            url: '@Url.Action("List", "Log")',
            type: 'GET',
            data: { createdFrom, createdTo, message, logLevel, userName },
            success: function (response) {
                // Update the log table with the response from the partial view
                $("#logTableContainer").html(response);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert("Error fetching logs.");
                console.log("AJAX error:", textStatus, errorThrown);
                console.log("Response:", jqXHR.responseText);
            }
        });
    }

    // delete seleted log

    // Initialize an empty array to store selected IDs
    let idList = [];

    // Function to handle individual checkbox changes
    function updateIdList(checkbox) {
        const id = checkbox.value;

        if (checkbox.checked) {
            // Add ID if it's checked and not already in the list
            if (!idList.includes(id)) {
                idList.push(id);
            }
        } else {
            // Remove ID if it's unchecked
            const index = idList.indexOf(id);
            if (index > -1) {
                idList.splice(index, 1);
            }
        }
        console.log('Current ID List:', idList);
    }

    // Function to handle "Select All" checkbox
    function selectAllLogs(source) {
        const checkboxes = document.querySelectorAll("#logTableBody input[type='checkbox']");
        idList = []; // Clear idList to start fresh

        checkboxes.forEach(checkbox => {
            checkbox.checked = source.checked; // Set all checkboxes based on "Select All" status

            if (source.checked) {
                // Add the ID if "Select All" is checked
                idList.push(checkbox.value);
            }
        });

        // Log the updated idList
        console.log('Current ID List:', idList);
    }

    // Attach event listeners to each individual checkbox
    document.querySelectorAll('.select-log').forEach(checkbox => {
        checkbox.addEventListener('change', function () {
            updateIdList(this);
        });
    });

    // Function to delete selected logs
    function deleteSelectedLogs() {
        if (idList.length === 0) {
            alert("Select the log first.");
            return;
        }

        // Confirm with the user
        const confirmation = confirm("Are you sure you want to delete the selected logs?");
        if (!confirmation) return;

        // Send the idList to the server
        fetch('/Log/DeleteSelectedLog', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ ids: idList })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // alert("Selected logs have been deleted.");

                    // Remove the selected rows from the table
                    idList.forEach(id => {
                        const row = document.querySelector(`tr[data-id="${id}"]`);
                        if (row) {
                            row.remove();
                        }
                    });

                    // Clear the idList after deletion
                    idList = [];

                    location.reload();
                } else {
                    alert("An error occurred while deleting logs.");
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert("An error occurred while deleting logs.");
            });
    }

    // Function to delete selected logs
    function clearLogs() {

        // Confirm with the user
        const confirmation = confirm("Are you sure you want to remove all the logs?");
        if (!confirmation) return;

        // Send the idList to the server
        fetch('/Log/ClearLogs', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },

        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Cleared All The Logs.");
                    location.reload(); // Reload the page or update the UI as needed
                } else {
                    alert("An error occurred while Clearing logs.");
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert("An error occurred while Clearing logs.");
            });
    }

</script>